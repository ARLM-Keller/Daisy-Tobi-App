= !FlowDocument: rich-text renderer and editor =

Part of .NET WPF (Windows Presentation Foundation)

A rich-text viewer can be created programmatically, or by
loading a XAML file directly.

This could be a good starting point to implement the data binding
between the Urakawa-SDK data model and the text viewer. It would be
read-only though, and I'm not sure about selection, highlighting, etc.

Examples here:

http://msdn2.microsoft.com/en-us/library/aa970909.aspx
http://www.codeproject.com/KB/WPF/OpenFlowDoc.aspx

The !RichTextBox editor control is limited compared to !FlowDocument, but
I think that the data binding with the Urakawa-SDK data model would work
the same way, because the underlying document is a fully-fledged
!FlowDocument (only the GUI is limited):

http://msdn2.microsoft.com/en-us/library/aa970779.aspx

The common content model is described here:

http://msdn2.microsoft.com/en-us/library/aa970786.aspx

Here's some additional source-code, to illustrate how to parse a !FlowDocument programmatically:

http://www.openxml.biz/OpenXMLWriter.html

Also, here's a link to the Data Binding documentation for WPF (which should greatly simplify the linkage from GUI to Urakawa-SDK):

http://msdn2.microsoft.com/en-us/library/ms752347.aspx 

More food for thoughts:

I found a link to the text-selection architecture:

http://msdn2.microsoft.com/en-us/library/system.windows.documents.textselection.aspx

A great example of how to implement the GoF Command Design Pattern in a WPF rich-text editor:

http://www.codeproject.com/KB/WPF/WpfCommandPatternApplied.aspx 