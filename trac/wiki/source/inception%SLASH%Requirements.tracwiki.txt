= Requirements =

'''To be sorted ! '''

Useful additional reading: [wiki:TobiDaisyProdToolReqs how Tobi relates to the Daisy 3 Production Tools Requirements] ("D3PT Reqs").

== DAISY Support ==

 * Generates valid DAISY content.
 * Fully supports the DAISY navigation model:
  * Table Of Content (!NavMap).
  * Skippability.
  * Escapability.
  * Page numbering.
  * Custom navigation lists.
 * Supports the full DTBook format:
  * Producer notes.
  * Foot notes.
  * Side bars.
  * Tables.
  * Lists.
  * etc.
 * Supports bookmarks (including import and export of DAISY bookmarks).
 * Supports metadata.
 * Supports resource file.
 * and more...

== Key Authoring Features ==

 * Supports importing external content (with re-mapping to local context):
  * HTML
  * DTBook
  * audio (WAV, MP3)
  * NCC, NCX
  * other formats: Daisy-Pipeline integration ?
 * Provides wizard assistant for creating content from scratch.
 * Supports editing multiple DAISY presentations at the same time, which allows exchanging content between them.
 * Supports cut/copy/paste of any type of content (e.g. audio chunk, DTBook section, DTB fragment, text range).
 * Supports undo/redo for all types of modifications.
 * Supports live narration recording:
  * Supports multiple recording modes (e.g. punch-in insert and overwrite).
  * Supports the choice of various audio formats and qualities.
  * Allows selection of input and output audio devices.
  * Is capable of receiving user input from external devices.
  * Is capable of notifying state / progress information to external devices (e.g. studio monitor control).
 * Integrates rich text editing capabilities, while retaining audio synchronization.
 * Allows direct manipulation of the text document structure.
 * Supports the unicode character set and allows to choose the output text encoding.
 * Enforces validation rules during authoring (e.g. DTD-driven edition, error-highlighting, auto-completion / content assistant). "On the fly" validation: do not let users create non-valid content.
 * Allows full control of the synchronization granularity (word, sentence, paragraph).
 * Supports editing of !NavMap granularity.
 * Supports creation of custom !NavLists.
 * Provides the ability to manage Skippable items.
 * Automatically generates default / required metadata.
 * Supports importing external DTBook metadata (existing bibliographic data).
 * Provides an easy-to-use metadata editor.
 * Supports making bookmarks and highlights with audio and text content, and provides useful bookmark navigation features (e.g. todo/fixme list).
 * Provides a user interface to access a library of snippets (content fragments) that can be placed inside the main document (e.g. copyright notice, pre-formatted tables).
 * Offers automatic text structure detection for several languages (e.g. sentences for English, Japanese, general heading/section recognition).
 * Provides powerful content synchronization features (e.g. map existing audio-only NCX book with existing DTBook text).

== Other Design Goals ==

 * Allows customization of the user-interface layout to meet the requirement of specific user profiles.
 * Is a modular application platform that can be extended (e.g. plugins).
 * Includes a spell-checker.
 * Supports Additional (off-specification) semantic markup (e.g. Braille,large print).
 * Offers a consistent user-interface with Obi (e.g. keyboard shortcuts, authoring metaphors).
 * Crash report, log, send to website.

== Future Directions ==

The features below ended in this bucket either because they are out of scope given the aggressive schedule, or because they can be realized by third-party software services (e.g. the Daisy-Pipeline).

 * Offers a powerful template mechanism:
  * Has a built-in library of pre-defined templates.
  * Allows for custom template creation.
 * Native TTS integration (or handled by Daisy-Pipeline ?).
 * Built-in audio phrase detection.
 * Speech recognition.
 * Support for structured formats:
  * MathML
  * SVG


'''System Integration'''

 - Minimum: Processor / Memory / OS version / screen size / codec playback and encoding / SAPI voices / proprietary library install (DirectX, .NET)
 - Deployment / Installation (run from CD)
 - Incremental online/local updates (partial binary, plugin, help files) + scheduling ALL controlled by the organization.
 - Version reporting
 - Install/Remove specific plugins
 - Trial / license expiration
 - Reproducible bugs: execution trace, log, send-to (local organization or main Tobi server)
 - Configurable encoder (user-selectable)
 - Remote storage, network latency (design dialogs prompts to inform the user, make application responsive)
 - Automatic-save in the background (i.e. every 5mn) to make sure to have a recent version of the XML (XUK) in case of crash, etc.
 - On-demand backup/snapshot of the whole project.
 - Awareness of the installed DAISY players on the machine (for QA, or "real-world" playback, not just WYSIWYG)
 - Integration with file storage infrastructure (possibly remote). URL scheme to handle remote file storage transparently (related topics: !BitTorrent, network overload, load balancing).
 - User profile: log-in as a particular user, to get access to a custom profile (screen-reader, braille display user). Coordination with system-wide logon (Windows XP /MyDocuments, etc.).
 - Use external tool transparently: select audio+open audio-editor+modify+close+automatic re-open in the main application, with the original content replaced by the new content. Concern: loss of information in the process (import/export from/to different data models). See !OpenOffice import/export Word feature.

'''Audio recording'''

 - Recording options: selectable format (stereo/mono, sample rate, bit rate). Speech vs music compression
 - Disable auto-save (to avoid extra processor/IO load)
 - Minimizing keystrokes ("silent button"). Avoid refresh-able hardware Braille displays (noisy).
 - Support for mixing audio formats into 
 - Record at the highest quality (master), then downgrade at export time to match the requirements of a specific .
 - Follow Obi UI design conventions (avoid confusing users, consistent user experience across the whole software suite).

'''User preferences'''

 - Language
 - Accessibility requirement (screen reader, input device, etc.)
 - Keyboard shortcuts (the whole map between physical keys and logical actions)
 - Session
 - UI layout ("perspective")

'''Authoring Workflow'''

 - Multi-user editing/recording support, concurrency, versioning (lock access to a chapter, edit, the re-assemble the parts)
 - Instant playback from within the authoring views (WYSIWYG)
 - DTbook from transcription department + Tobi to record audio and fine-tune text + QA + export to specific format.
 - Open Obi project (NCX only structured audio recording) and add text/images + fine-tune.
 - Multilingual narration of a single book structure (i.e. support for AMIS localization).

'''Quality Assurance'''

 - audio quality, or text, or resulting book (see if it plays correctly in the target player).
 - ability to add producer notes annotations (visual clues + voice annotations) + generate report (e.g. HTML) + open report at startup with links to the document model. + export as regular bookmark for use in standard DAISY player.

'''Format support'''

 - Open / Save native project / xuk
 - Native export for DAISY 3 and DAISY 2.02 (no duplicated work, use existing Pipeline transformer). Support for legacy players.
 - Import DAISY 2.02 + fine-tune + export DAISY 3.0 => need for semantic equivalency classes (so that the data model handles the conversion)

'''Document Templates vs snippets (skeleton)'''

 - Shelf, library of Text+Image+Audio snippets
 - Import / Export documents / medias
 - Copy / Cut / Paste across presentations / documents (open multiple projects)

'''Documentation'''

 - Authoring guidelines
 - Integrated help

'''UI'''

 - Multilingual (localizable)
 - Accessible to screen readers...although typically, JAWS feedback (TTS) for UI and current book text interferes with audio recording (Human voice), so there is not such a compelling case for using a text/audio-authoring tool with screen readers.
 - Self-voicing ui can help with the above concern, thanks to the use of limited descriptions that are more meaningful/specialized than screen-reader.
 - Configuration panels for all configurable features (no need to manually edit XML files)
 - Multi-faceted: narrator view (professional voice recorder) vs more complex authoring view (Visualization of the document vs tree structure representation).
 - At playback time: SMIL is master. At authoring time: structure (i.e. text) is master vs audio is master: natural document order issue (slide-show, website with DIVs structure and CSS visualization, the Sun newspaper: natural order but most users jump to page 3)
