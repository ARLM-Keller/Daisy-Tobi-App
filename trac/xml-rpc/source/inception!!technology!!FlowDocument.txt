= !FlowDocument: rich-text renderer and editor =

Part of .NET WPF (Windows Presentation Foundation)

A rich-text viewer can be created programmatically, or by
loading a XAML file directly.

[[Image(FlowDocument_RTL_1.png)]]

[[Image(FlowDocument_RTL_2.png)]]

[[Image(http://static.fortes.com/2005/10/number-substitution/number-substitution.gif)]]

[[Image(http://www.xtabvbcity.plus.com/Blogs/FlowDoc1.jpg)]]

[[Image(http://www.tmssoftware.com/Images/xv.png)]]

[[Image(http://blog.kirupa.com/images/kWordpadFinished_ABC9/kWordpad_ss22.png)]]

[[Image(http://dotnetslackers.com/images/ArticleImages/FlowDocumentReaderMultipleColumns.jpg)]]

[[Image(http://daron.yondem.com/tr/content/binary/20102007_4.png)]]

[[Image(http://www.xtabvbcity.plus.com/Blogs/FlowDoc1.jpg)]]


[[Image(http://www.scottgu.com/blogposts/readers/step0.jpg))]

[[Image(http://www.scottgu.com/blogposts/readers/step1.jpg))]

[[Image(http://www.scottgu.com/blogposts/readers/step2.jpg))]

[[Image(http://www.scottgu.com/blogposts/readers/step5.jpg))]


http://www.devcity.net/Articles/351/1/article.aspx http://www.devcity.net/PrintArticle.aspx?ArticleID=351

Examples here:

http://www.codeproject.com/KB/WPF/OpenFlowDoc.aspx

Accessibility:

http://msdn.microsoft.com/en-us/library/ms753388(VS.85).aspx

Built-in Annotations framework !

http://msdn.microsoft.com/en-us/library/ms748864.aspx

http://blogs.microsoft.co.il/blogs/tamir/archive/2007/05/29/WPF-_2B00_-UISpy-_3D00_-Accessibility-testing.aspx

Internal Architecture (FrameworkElement vs. FrameworkContentElement):

http://wpfdisciples.wordpress.com/2008/10/09/frameworkelement-vs-frameworkcontentelement/

Multithreading:

http://chrismylonas.blogspot.com/2007/12/flowdocument-and-multiple-threads.html

Search algorithm and text range selection:

http://shevaspace.spaces.live.com/blog/cns!FD9A0F1F8DD06954!638.entry

http://shevaspace.blogspot.com/2007/11/how-to-search-text-in-wpf-flowdocument.html

http://blogs.microsoft.co.il/blogs/tamir/archive/2008/05/12/search-and-highlight-any-text-on-wpf-rendered-page.aspx

http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=3258597&SiteID=1

The !RichTextBox editor control is limited compared to !FlowDocument, but
I think that the data binding with the Urakawa-SDK data model would work
the same way, because the underlying document is a fully-fledged
!FlowDocument (only the GUI is limited):

http://msdn2.microsoft.com/en-us/library/aa970779.aspx

The common content model is described here:

http://msdn2.microsoft.com/en-us/library/aa970786.aspx

Here's some additional source-code, to illustrate how to parse a !FlowDocument programmatically:

http://www.openxml.biz/OpenXMLWriter.html

Also, here's a link to the Data Binding documentation for WPF (which should greatly simplify the linkage from GUI to Urakawa-SDK):

http://msdn2.microsoft.com/en-us/library/ms752347.aspx 

XamlWriter/Reader:

http://geekswithblogs.net/NewThingsILearned/archive/2008/11/17/rich-formatted-text-messagebox-in-wpf.aspx

More food for thoughts:

I found a link to the text-selection architecture:

http://msdn2.microsoft.com/en-us/library/system.windows.documents.textselection.aspx

A great example of how to implement the GoF Command Design Pattern in a WPF rich-text editor:

http://www.codeproject.com/KB/WPF/ExtendedWPFCommands.aspx

http://www.codeproject.com/KB/WPF/WpfCommandPatternApplied.aspx 

Switching between read-only !TextBlock and editable !TextBox based on mouse behaviour:

http://blog.paranoidferret.com/index.php/2008/10/02/wpf-tutorial-getting-the-doubleclick-event/

More links:

http://hashbucket.wordpress.com/2007/09/04/building-a-simple-text-editor/

http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=3092330&SiteID=1

http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2197339&SiteID=1

http://blog.spencen.com/2008/01/19/html-to-flowdocument-converter.aspx

http://blog.spencen.com/2008/04/23/handling-images-with-the-htmltoxamlconverter.aspx

http://dedjo.blogspot.com/2008/04/wordml-to-flowdocument-how-to-convert.html

http://blogs.microsoft.co.il/blogs/tamir/archive/2008/04/17/converting-fixeddocument-xpsdocument-too-to-flowdocument.aspx

http://dedjo.blogspot.com/2008/04/converting-fixeddocument-xpsdocument.html

http://blogs.msdn.com/llobo/archive/2007/06/05/wpf-blog-writer.aspx

http://www.devx.com/dotnet/Article/34644

http://blogs.msdn.com/jfoscoding/archive/2006/01/14/512825.aspx

http://blogs.msdn.com/jfoscoding/archive/2006/01/16/513383.aspx


Embed any UIElement inside BlockUIContainer or InlineUIContainer as components of a FlowDocument (WavForm preview or even with some editing capabilities, or action buttons next to each phrase for direct editing, etc.)

http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1579232&SiteID=1&pageid=0

http://msdn.microsoft.com/en-us/library/aa970909.aspx

http://www.ddj.com/windows/209800469

!DataBinding:

http://blog.spencen.com/2008/01/19/html-to-flowdocument-converter.aspx

http://code.logos.com/blog/2008/01/data_binding_in_a_flowdocument.html

http://www.paulstovell.com/blog/attached-bindablerun

http://fortes.com/2007/03/bindablerun

Spell checking:

http://www.dev102.com/2008/03/25/customize-spellcheck-on-wpf-text-controls/
http://www.codeproject.com/KB/WPF/SmartTextBox.aspx

Customizing !RichTextBox:

http://msdn.microsoft.com/en-us/library/ms753314.aspx

Several tips, particularly for selecting content programmatically:

http://blogs.msdn.com/prajakta/

Scroll into view:

http://statestreetgang.net/post/2008/05/Scroll-Selected-Text-Into-View-in-WPF.aspx

Typography things:

http://blogs.msdn.com/text/

http://fortes.com/2005/10/number-substitution/

Mouse click/hover detection:

http://blogs.microsoft.co.il/blogs/justinangel/archive/2008/01/29/tapuz-net-getting-wpf-s-flowdocument-and-flowdoucmentreader-mouseover-text.aspx

Bindable Run:

http://fortes.com/2007/03/20/bindablerun/

http://www.paulstovell.com/blog/attached-bindablerun

http://code.logos.com/blog/2008/01/data_binding_in_a_flowdocument.html

Pagination:

http://forums.msdn.microsoft.com/en-US/wpf/thread/bc71bfd3-b456-4de2-8ac8-70f1d46bcb06

Templating:

http://janrep.blog.codeplant.net/WPF-Multipage-Reports--Part-III--Rendering.aspx

Neat/quick summary of content model:

http://fortes.com/2007/03/inline-elements/

http://fortes.com/2007/03/inline-properties/

http://fortes.com/2007/04/block-elements/

White spaces around Run:

http://fortes.com/2007/03/collapsed-spaces-around-run/

Tree walking the !FlowDocument + pagination:

http://janrep.blog.codeplant.net/WPF-Multipage-Reports--Part-IV--Pagination.aspx

The Document object from the IE WebBrowser widget (COM interoperability):

http://www.rhizohm.net//irhetoric/blog/72/default.aspx

Undo/Redo in RichTextBox:

The underlying FlowDocument data model is completely
decoupled from the editor (for example, it could be used in a totally
different read-only viewer), and yet *any* change of property in the
data model is registered by the undo/redo manager. There is also
support for the equivalent of our Transactions:

--------------------------------------
  TextPointer startPosition = richTextBox.Selection.Start;

 // below: 3 consecutive changes, registered sequentially in the
undo/redo manager

  Run r = new Run("bold line of text", startPosition); // inserts the
new text Run into the RichTextBox at the given position
  r.FontWeight = FontWeights.Bold; // changes a property of the Run
  r.Background = Brushes.Yellow; // changes another property of the Run
--------------------------------------

To register these 3 operations as one macro-command (and there to be
able to undo in one CTRL-Z only), here is what you do (similar to our
Transactions):

// wraps the undo-redo registration using a code block {}
using(richTextBox.DeclareChangeBlock())
{
...
}

----
or
----

// wraps the undo-redo registration using 'begin' and 'end'
richTextBox.BeginChange();
...
richTextBox.EndChange();
